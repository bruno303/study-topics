// Code generated by MockGen. DO NOT EDIT.
// Source: planning-poker/internal/domain/entity (interfaces: ClientCollection)
//
// Generated by this command:
//
//	mockgen -destination mocks.go -package entity . ClientCollection
//

// Package entity is a generated GoMock package.
package entity

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientCollection is a mock of ClientCollection interface.
type MockClientCollection struct {
	ctrl     *gomock.Controller
	recorder *MockClientCollectionMockRecorder
	isgomock struct{}
}

// MockClientCollectionMockRecorder is the mock recorder for MockClientCollection.
type MockClientCollectionMockRecorder struct {
	mock *MockClientCollection
}

// NewMockClientCollection creates a new mock instance.
func NewMockClientCollection(ctrl *gomock.Controller) *MockClientCollection {
	mock := &MockClientCollection{ctrl: ctrl}
	mock.recorder = &MockClientCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientCollection) EXPECT() *MockClientCollectionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClientCollection) Add(client *Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", client)
}

// Add indicates an expected call of Add.
func (mr *MockClientCollectionMockRecorder) Add(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClientCollection)(nil).Add), client)
}

// Count mocks base method.
func (m *MockClientCollection) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockClientCollectionMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClientCollection)(nil).Count))
}

// Filter mocks base method.
func (m *MockClientCollection) Filter(f func(*Client) bool) ClientCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", f)
	ret0, _ := ret[0].(ClientCollection)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockClientCollectionMockRecorder) Filter(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockClientCollection)(nil).Filter), f)
}

// First mocks base method.
func (m *MockClientCollection) First() (*Client, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(*Client)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockClientCollectionMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockClientCollection)(nil).First))
}

// ForEach mocks base method.
func (m *MockClientCollection) ForEach(f func(*Client)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEach", f)
}

// ForEach indicates an expected call of ForEach.
func (mr *MockClientCollectionMockRecorder) ForEach(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockClientCollection)(nil).ForEach), f)
}

// Remove mocks base method.
func (m *MockClientCollection) Remove(clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", clientID)
}

// Remove indicates an expected call of Remove.
func (mr *MockClientCollectionMockRecorder) Remove(clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockClientCollection)(nil).Remove), clientID)
}

// Values mocks base method.
func (m *MockClientCollection) Values() []*Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]*Client)
	return ret0
}

// Values indicates an expected call of Values.
func (mr *MockClientCollectionMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockClientCollection)(nil).Values))
}
